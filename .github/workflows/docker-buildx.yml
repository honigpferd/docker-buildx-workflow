name: üê≥ Docker Buildx Workflow

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - 'main'
  workflow_call:
    inputs:
      platforms:
        description: 'target platforms to build docker images'
        default: 'linux/amd64,linux/arm64'
        required: false
        type: string
      registry: 
        description: 'container registry'
        default: 'ghcr.io'
        required: false
        type: string
      image_name:
        description: 'name of the docker image'
        default: ${{ github.repository }}
        required: false
        type: string
      tags:
        description: 'image tags based on the following events/attributes'
        default: '' # see below at step 'Get tags'
        required: false
        type: string


env:
  REGISTRY: ${{ inputs.registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ inputs.image_name || github.repository }}
  PLATFORMS: ${{ inputs.platforms || 'linux/amd64,linux/arm64' }}
  TAGS: ${{ inputs.tags }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
#      # This is used to complete the identity challenge
#      # with sigstore/fulcio when running outside of PRs.
#      id-token: write

    steps:
      # if env.TAGS not set fallback to default
      - name: Get tags
        # needed to workaround multiline string
        if: ${{ !env.TAGS }}
        run: |
          DEFAULT_TAGS=$(cat << EOF
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          EOF
          )
          echo "TAGS<<EOF" >> $GITHUB_ENV
          echo "$DEFAULT_TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@0a6d062e780d218ea909a18365e0ab2e36d09612
        with:
          verbose: true

#      # Install the cosign tool except on PR
#      # https://github.com/sigstore/cosign-installer
#      - name: Install cosign
#        if: github.event_name != 'pull_request'
#        uses: sigstore/cosign-installer@536b37ec5d5b543420bdfd9b744c5965bd4d8730

      # Install QEMU for target platform emulation (i.e. arm64)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@95cb08cb2672c73d4ffd2f422e6d11953d2a9c70

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@12cce9efe0d49980455aaaca9b071c0befcdd702
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.TAGS }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          context: .
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

#      # Sign the resulting Docker image digest except on PRs.
#      # This will only write to the public Rekor transparency log when the Docker
#      # repository is public to avoid leaking data.  If you would like to publish
#      # transparency data even for private images, pass --force to cosign below.
#      # https://github.com/sigstore/cosign
#      - name: Sign the published Docker image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        # This step uses the identity token to provision an ephemeral certificate
#        # against the sigstore community Fulcio instance.
#        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
